#include <stdio.h>

#define TAILLE 17

// Fonction pour initialiser le plateau
void initialisationPlateau(char plateau[TAILLE][TAILLE], int taille){
    for (int i=0; i<taille; i++){
        for (int j=0; j<taille; j++){
            if (i%2==0 && j%2==0){
                plateau[i][j] ='.';
            }else if (i%2==0 && j%2!=0) {
                plateau[i][j] ='|';
            }else if (i%2!=0 && j%2== 0) {
                plateau[i][j] ='-';
            }else {
                plateau[i][j] =' ';
            }
        }
    }
}

// Fonction pour afficher les colonnes
void annotationsColonnes(int taille){
    printf("    ");
    for (int j = 0; j<taille; j++){
        if (j%2==0) {
            printf("%d ",(j / 2)+1);
        } else {
            printf("  ");
        }
    }
    printf("\n");
}

// Fonction pour afficher les lignes
void annotationLigne(char plateau[TAILLE][TAILLE], int i, int taille) {
    if (i%2==0) {
        printf(" %c  ", 'A' + i / 2);
    } else {
        printf("    ");
    }
    for (int j=0; j<taille; j++) {
        printf("%c ", plateau[i][j]);
    }
    printf("\n");
}

// Fonction pour afficher le plateau complet
void affichagePlateau(char plateau[TAILLE][TAILLE], int taille) {
    annotationsColonnes(taille);
    for (int i=0; i<taille; i++) {
        annotationLigne(plateau,i,taille);
    }
}

// Initialiser les pions
void initialiserPions(char plateau[TAILLE][TAILLE], int joueurs) {
    plateau[0][8] = 'X'; // Joueur 1
    plateau[16][8] = 'O'; // Joueur 2
    if (joueurs == 4) {
        plateau[8][0] = 'A'; // Joueur 3
        plateau[8][16] = 'B'; // Joueur 4
    }
}

// Vérifier si le déplacement est valide
int mouvementValide(char plateau[TAILLE][TAILLE], int x, int y, int nx, int ny) {
    // Vérifier les limites du plateau
    if (nx < 0 || ny < 0 || nx >= TAILLE || ny >= TAILLE) return 0;

    // Vérifier qu'on se déplace sur une case vide
    if (plateau[nx][ny] != '.') return 0;

    // Vérifier qu'il n'y a pas de mur bloquant le chemin
    if (x == nx) {
        // Déplacement horizontal
        if (y < ny && plateau[x][y + 1] == '|') return 0;
        if (y > ny && plateau[x][y - 1] == '|') return 0;
    } else if (y == ny) {
        // Déplacement vertical
        if (x < nx && plateau[x + 1][y] == '-') return 0;
        if (x > nx && plateau[x - 1][y] == '-') return 0;
    }

    return 1;
}

// Déplacer un pion
int deplacerPion(char plateau[TAILLE][TAILLE], int *x, int *y, int nx, int ny) {
    if (mouvementValide(plateau, *x, *y, nx, ny)) {
        // Effectuer le déplacement
        plateau[nx][ny] = plateau[*x][*y];
        plateau[*x][*y] = '.';
        *x = nx;
        *y = ny;
        return 1;
    }
    return 0;
}

// Programme principal
int main() {
    char plateau[TAILLE][TAILLE];
    int joueurs = 2; // Changez à 4 pour une partie à 4 joueurs

    // Initialisation du plateau et des pions
    initialisationPlateau(plateau, TAILLE);
    initialiserPions(plateau, joueurs);

    // Affichage initial du plateau
    affichagePlateau(plateau, TAILLE);

    // Placez ici la logique pour jouer la partie (déplacement, tours, etc.)

    return 0;
}
